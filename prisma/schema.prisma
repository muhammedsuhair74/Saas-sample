// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String           @id @default(uuid())
  email              String           @unique
  name               String
  password           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  avatarUrl          String? // Optional field for avatar
  isTwoFactorEnabled Boolean          @default(false) // üîê 2FA enabled flag
  Subscription       Subscription[]
  twoFactorTokens    TwoFactorToken[]
  workouts           Workout[]
  Badge              Badge[]
  TotalWorkouts      TotalWorkouts[]
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  plan      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model TwoFactorToken {
  id        String   @id @default(uuid())
  token     String
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model Workout {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  workoutType String
  reps        Int
  hour        DateTime
  createdAt   DateTime @default(now())

  @@unique([userId, hour, workoutType])
}

model Badge {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  value       Int       @default(0)
  workoutType String    @default("pushup")
  badgeType   BadgeType @default(DAILY)
  awardedAt   DateTime  @default(now())
  isPermanent Boolean   @default(false)
  reps        Int       @default(0)

  @@index([userId, workoutType])
}

model TotalWorkouts {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  type   String @default("pushup")
  total  Int    @default(0)

  @@index([userId, type])
}

enum BadgeType {
  DAILY
  WEEKLY
  MONTHLY
  WEEKLY_STREAK
  MONTHLY_STREAK
}

enum WorkoutType {
  pushups
  squat
  plank
  situp
}
